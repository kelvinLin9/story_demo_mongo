#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('coffee:server');
var http = require('http');
var socketIo = require('socket.io');
const ChatMessage = require('../models/chatModel');

/**
 * Get port from environment and store in Express.
 */
console.log(process.env.PORT)
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

// Initialize socket.io
var io = socketIo(server);

// Node.js 伺服器端代碼節選
io.on('connection', (socket) => {
  console.log('New WebSocket connection');

  socket.on('joinRoom', ({ username, room }) => {
      const user = addUser({ id: socket.id, username, room });
      socket.join(user.room);
      socket.emit('message', { username: '系統', message: '歡迎進入聊天室!', time: new Date() });
      socket.broadcast.to(user.room).emit('message', { username: '系統', message: `${user.username} 加入了聊天室!`, time: new Date() });
  });

  socket.on('chatMessage', async ({ message, username, time }) => {
      const user = getUser(socket.id);
      if (user) {
          const chatMessage = new ChatMessage({
              username: user.username,
              room: user.room,
              message: message,
              time: time
          });

          try {
              await chatMessage.save();
              io.to(user.room).emit('message', { username, message, time });
          } catch (error) {
              console.error('Message save error:', error);
          }
      }
  });

  socket.on('disconnect', () => {
      const user = removeUser(socket.id);
      if (user) {
          io.to(user.room).emit('message', { username: '系統', message: `${user.username} 離開了聊天室`, time: new Date() });
      }
  });
});


/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) {
    // named pipe
    return val;
  }
  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
