#!/usr/bin/env node

/**
 * Module dependencies.
 */
const app = require('../app');
const debug = require('debug')('coffee:server');
const http = require('http');
const socketIo = require('socket.io');
const ChatMessage = require('../models/chatModel');

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

/**
 * User management utilities.
 */
const users = [];

function addUser({ id, username, room }) {
  username = username.trim().toLowerCase();
  room = room.trim().toLowerCase();

  const existingUser = users.find((user) => user.room === room && user.username === username);
  if (existingUser) {
    return { error: 'Username is taken.' };
  }

  const user = { id, username, room };
  users.push(user);
  return { user };
}

function removeUser(id) {
  const index = users.findIndex((user) => user.id === id);
  if (index !== -1) {
    return users.splice(index, 1)[0];
  }
}

function getUser(id) {
  return users.find((user) => user.id === id);
}

function getUsersInRoom(room) {
  return users.filter((user) => user.room === room);
}

/**
 * Initialize socket.io
 */
const io = socketIo(server);

io.on('connection', (socket) => {
  console.log('New WebSocket connection');

  socket.on('joinRoom', ({ username, room }) => {
    const { error, user } = addUser({ id: socket.id, username, room });

    if (error) {
      return console.log(error);
    }

    socket.join(user.room);
    socket.emit('message', { username: '系統', text: `歡迎進入 ${user.room} 聊天室!` });
    socket.broadcast.to(user.room).emit('message', { username: '系統', text: `${user.username} 加入了聊天室!` });
  });

  socket.on('chatMessage', (message) => {
    const user = getUser(socket.id);

    if (user) {
      io.to(user.room).emit('message', { username: user.username, text: message });
    }
  });

  socket.on('disconnect', () => {
    const user = removeUser(socket.id);

    if (user) {
      io.to(user.room).emit('message', { username: '系統', text: `${user.username} 離開了聊天室。` });
    }
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) {
    return val; // named pipe
  }
  if (port >= 0) {
    return port; // port number
  }
  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
