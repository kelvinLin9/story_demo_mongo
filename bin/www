#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('coffee:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */
console.log(process.env.PORT)
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

// socket
var socketIo = require('socket.io'); 
var io = socketIo(server); 
const ChatMessage = require('../models/chatModel');

io.on('connection', (socket) => {
  console.log('New WebSocket connection');

  socket.on('joinRoom', ({ username, room }) => {
    const user = { id: socket.id, username, room };
    socket.join(user.room);
    // 欢迎新用户
    socket.emit('message', 'Welcome to the chat room!');
    // 广播新用户加入
    socket.broadcast.to(user.room).emit('message', `${user.username} has joined the chat!`);
  });

  // 处理聊天消息
  socket.on('chatMessage', async (msg) => {
    const user = getUser(socket.id); // 假设你有一个函数来根据socket.id获取用户信息
    const message = new ChatMessage({
      username: user.username,
      room: user.room,
      message: msg,
    });

    try {
      await message.save();
      io.to(user.room).emit('message', msg);
    } catch (error) {
      console.error('Message save error:', error);
    }
  });

  // 用户断开连接的逻辑
  socket.on('disconnect', () => {
    io.to(user.room).emit('message', `${user.username} has left the chat`);
  });
});
// ---
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
